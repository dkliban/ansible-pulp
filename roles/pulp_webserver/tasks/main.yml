---
- name: Load OS specific variables
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - 'vars'
  tags:
    - always

- name: Ensure that if we have web cert, we also have key
  fail:
    msg: "If you give one of pulp_webserver_tls_cert and pulp_webserver_tls_key, you must also give the other."
  when:
    - "pulp_webserver_tls_cert is defined or pulp_webserver_tls_key is defined"
    - "pulp_webserver_tls_cert is not defined or pulp_webserver_tls_key is not defined"

- debug:
    msg: >
      {{ (pulp_install_source == "packages") | ternary(pulp_python_interpreter, pulp_install_dir ~ "/bin/python") }}
    verbosity: 1

- name: "Check installed plugins for {{ pulp_webserver_server }} snippets"
  script:
    cmd: check_snippet.py {{ item.key | regex_replace("-", "_") | quote }} {{ pulp_webserver_server }}.conf
  args:
    executable: '{{ (pulp_install_source == "packages") | ternary(pulp_python_interpreter, pulp_install_dir ~ "/bin/python") }}'
  register: snippets
  with_dict: '{{ pulp_install_plugins_normalized }}'
  failed_when: >
    snippets.stderr is search("env: 'python': No such file or directory")
  changed_when: false
  check_mode: false

- include_tasks: generate_tls_certificates.yml
  args:
    apply:
      become: true
  when:
    - pulp_webserver_tls_cert is undefined
    - pulp_webserver_tls_key is undefined

- include_tasks: import_certificates.yml
  args:
    apply:
      become: true
  when:
    - pulp_webserver_tls_cert is defined
    - pulp_webserver_tls_key is defined

- name: Copy custom CA cert
  copy:
    src: "{{ pulp_websserver_custom_ca_cert }}"
    dest: "{{ pulp_webserver_trusted_root_certificates_path }}/pulp-custom-ca-cert.crt"
    mode: '0644'
    owner: root
    group: root
  when: pulp_websserver_custom_ca_cert is defined
  become: true
  notify: update ca trust

- name: Create ACME dirs
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ pulp_user }}"
    group: "{{ pulp_group }}"
  become: true
  with_items:
    - "{{ pulp_webserver_static_dir }}"
    - "{{ pulp_webserver_static_dir }}/.well-known"

- name: Create TLS 'certs' directory
  file:
    path: "{{ pulp_webserver_static_dir }}/certs"
    state: directory
    mode: 0755
    owner: "{{ pulp_user }}"
    group: "{{ pulp_group }}"
  become: true

- name: Create a symbolic link for the webserver's root CA certificate
  file:
    src: "{{ pulp_webserver_tls_folder }}/root.crt"
    dest: "{{ pulp_webserver_static_dir }}/certs/root.crt"
    state: link
    mode: 0755
    owner: "{{ pulp_user }}"
    group: "{{ pulp_group }}"
  when:
    - pulp_webserver_tls_cert is undefined
    - pulp_webserver_tls_key is undefined
  become: true

- name: Create a symbolic link for the webserver's TLS certificate
  file:
    src: "{{ pulp_webserver_tls_folder }}/pulp_webserver.crt"
    dest: "{{ pulp_webserver_static_dir }}/certs/webserver.crt"
    state: link
    mode: 0755
    owner: "{{ pulp_user }}"
    group: "{{ pulp_group }}"
  become: true

- include_tasks: "{{ pulp_webserver_server }}.yml"

- block:

    - name: Install packages for Ansible seboolean module
      yum:
        name: "{{ pulp_seboolean_packages }}"
        state: present

    - name: Set httpd_can_network_connect flag on and keep it persistent across reboots
      seboolean:
        name: httpd_can_network_connect
        state: true
        persistent: true

  become: true
  when:
    - ansible_os_family == 'RedHat'
    - ansible_selinux.status == 'enabled'
    - not (pulp_api_bind.startswith('unix:') and pulp_content_bind.startswith('unix:'))

- include_tasks: firewalld.yml
  when: pulp_configure_firewall in ['firewalld', 'auto']
